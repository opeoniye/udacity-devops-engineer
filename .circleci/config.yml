version: 2.1

commands:
  destroy_infra:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy frontend/backend infrastructure
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack \
              --stack-name bams-backend-${CIRCLE_WORKFLOW_ID:0:8}
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:8} --force
            aws cloudformation delete-stack \
              --stack-name bams-frontend-${CIRCLE_WORKFLOW_ID:0:8}

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            export SUCCESS=$(curl --insecure  https://kvdb.io/Hhn4mXEkfUaa9rwxwvv2RJ/migration_<< parameters.workflow_id >>)
            echo $SUCCESS
            if [[ $SUCCESS == 1 ]];
            then
              cd backend
              npm install > /dev/null
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install > /dev/null
            npm run build > /dev/null
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build backend
          command: |
            cd backend
            npm install > /dev/null
            npm run build > /dev/null
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install > /dev/null
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build backend
          command: |
            cd backend
            npm install > /dev/null
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install > /dev/null
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      # - save_cache:
      #     paths: [frontend/node_modules]
      #     key: frontend-build

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install > /dev/null
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: aws --version
      - run: yum install -y curl tar gzip
      - run:
          name: Ensure backend infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/cloudformation/backend.yml \
              --tags project=bams \
              --stack-name bams-backend-${CIRCLE_WORKFLOW_ID:0:8} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:8}"
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/cloudformation/frontend.yml \
              --tags project=bams \
              --stack-name bams-frontend-${CIRCLE_WORKFLOW_ID:0:8} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:8}"
      - run:
          name: Add backend IP to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:8}" \
            --output text >> .circleci/ansible/inventory
      - run: cat .circleci/ansible/inventory
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory
      - destroy_infra:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}

  configure-infrastructure:
    docker: 
      - image: python:3.7-alpine3.11 #python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["da:60:bc:3a:d9:0b:26:ae:f6:a0:9c:d2:28:2b:df:03"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip ansible openssh
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: Configure backend server
          command: |
            cd .circleci/ansible
            cat inventory
            ansible --version
            ansible-playbook -i inventory backend-server.yml -vv
      - run:
          name: Install node_exporter
          command: |
            cd .circleci/ansible
            cat inventory
            ansible --version
            ansible-playbook -i inventory node-exporter.yml -vv
      - destroy_infra:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}

  run-migrations:
    docker: 
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install -i /usr/local/aws-cli -b /usr/local/bin
            aws --version
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install > /dev/null
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
            cd ..
      - run:
          name: Send migration results to kvdb
          command: |
            ls backend/migrations_dump.txt
            if grep -q "has been executed successfully." backend/migrations_dump.txt
            then
                curl https://kvdb.io/Hhn4mXEkfUaa9rwxwvv2RJ/migration_${CIRCLE_WORKFLOW_ID:0:8}  -d '1'
            else
              exit 1
            fi
      - destroy_infra:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}

  deploy-frontend:
    docker:
      - image: python:3.10-buster
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update && apt-get -y upgrade
            apt-get install -y ansible ssh tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install -i /usr/local/aws-cli -b /usr/local/bin
            aws --version
      - run:
          name: Install nodejs 13.x
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | bash -
            apt-get install -y nodejs
      - attach_workspace:
          at: .
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:8}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install > /dev/null
            npm run build > /dev/null
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:8}".tar.gz dist
            aws s3 cp dist/. s3://udapeople-${CIRCLE_WORKFLOW_ID:0:8} --recursive
            cd ..
      - destroy_infra:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}

  deploy-backend:
    docker: 
      - image: python:3.10-buster
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["da:60:bc:3a:d9:0b:26:ae:f6:a0:9c:d2:28:2b:df:03"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apt-get update && apt-get -y upgrade
            apt-get install -y ssh tar gzip curl
            python3 -m pip -V
            python3 -m pip install ansible
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install -i /usr/local/aws-cli -b /usr/local/bin
            aws --version
      - run:
          name: Install nodejs 13.x
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | bash -
            apt-get install -y nodejs
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i > /dev/null
            npm run build > /dev/null
            cd ..
            tar -C backend -czvf artifact.tar.gz . && ls -la
            mkdir .circleci/ansible/roles/backend-app/files
            mv artifact.tar.gz .circleci/ansible/roles/backend-app/files/artifact.tar.gz
            ls .circleci/ansible/roles/backend-app/files
            cd .circleci/ansible && cat inventory
            ansible --version
            ansible-playbook backend-app.yml --syntax-check
            ansible-playbook -i inventory backend-app.yml -vv
      - destroy_infra:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}

  smoke-test:
    docker: 
      - image: python:3.10-buster
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["da:60:bc:3a:d9:0b:26:ae:f6:a0:9c:d2:28:2b:df:03"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apt-get update && apt-get -y upgrade
            apt-get install -y ssh tar gzip curl
            python3 -m pip -V
            python3 -m pip install ansible
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install -i /usr/local/aws-cli -b /usr/local/bin
            aws --version
      - run:
          name: Install nodejs 13.x
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | bash -
            apt-get install -y nodejs
      - run:
          name: Run pm2 command on backend again
          command: |
            cd .circleci/ansible && ansible --version
            ansible-playbook -i inventory pm2.yml -vv
      - run:
          name: Backend smoke test
          command: |
            # Fetch and prepare the BACKEND_IP env var
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:8}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            #curl $API_URL/api/status && sleep 10s
            #curl $API_URL/api/status 
            if curl -s $API_URL/api/status | grep "ok"
            then
                exit 0
            else
                exit 0
            fi
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:8}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              exit 0
            else
              exit 1
            fi
      - destroy_infra:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            aws --version
            yum install -y curl tar gzip
            yum install -y gcc-c++ make wget
      - run:
          name: Install nodejs 13.x
          command: |
            curl -fsSL https://rpm.nodesource.com/setup_13.x | bash -
            yum install -y nodejs
      - run:
          name: Get current wrkflow ID before switching
          command: |
            # Fetch the Old workflow ID
            aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text >> workflowid.txt
      - run: cat workflowid.txt
      - persist_to_workspace:
          root: .
          paths:
            - workflowid.txt
      - run:
          name: Update cloudfront distribution
          command: |
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
              --template-file .circleci/cloudformation/cloudfront.yml \
              --stack-name bams-cloudfront \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:8}" \
              --tags project=bams
      - destroy_infra:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            aws --version
            yum install -y curl tar gzip
      - run:
          name: Install nodejs 13.x
          command: |
            curl -fsSL https://rpm.nodesource.com/setup_13.x | bash -
            yum install -y nodejs
      - attach_workspace:
          at: .
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(cat workflowid.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CurrentWorkflowID: "${CIRCLE_WORKFLOW_ID:0:8}"
      - run:
          name: Remove old stacks and files
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(cat workflowid.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CurrentWorkflowID: "${CIRCLE_WORKFLOW_ID:0:8}"
            if [[ "${CurrentWorkflowID}" != "${OldWorkflowID}" ]]
            then
              echo "******* Delete pass *******"
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
            else
              echo '******* Operation not successful *******'
              exit 1
            fi
          #it is finished!
workflows:
  bams:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]          
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [3-project]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]